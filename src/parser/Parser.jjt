/**
 * JJTree template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{  static = true;}PARSER_BEGIN(Parser)package parser;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class Parser{  public static void main(String args [])  {
    FileInputStream fileStream=null;
    try {
    File file= new File("src/parser/test.txt");
    fileStream= new FileInputStream(file);
    } catch (FileNotFoundException e1) {
		// TODO Auto-generated catch block
		e1.printStackTrace();
	}
	 try
    {
    new Parser(fileStream);    SimpleNode n=Parser.Start();
    n.dump("");
    System.out.println("Thank you");    }    catch (Exception e)    {      System.out.println("Oops.");      System.out.println(e.getMessage());    }  }}PARSER_END(Parser)SKIP :{  " "| "\t"| "\n"| "\r"| < "//" (~[ "\n", "\r" ])*    (      "\n"    | "\r"    | "\r\n"    ) >| < "/*" (~[ "*" ])* "*"    (      ~[ "/" ] (~[ "*" ])* "*"    )*    "/" >}

TOKEN : /* KEYWORDS */
{
  < IF : "if" >
| < ELSE : "else" >
| < FOR : "for" >
| < FALSE : "false" >
| < TRUE : "true" >
| < DO : "do" >
| < IMPORT : "import" >
| < IMPLEMENTS : "implements" >
| < EXTENDS : "extends" >
| < PUBLIC : "public" >
| < PROTECTED : "protected" >
| < PRIVATE : "private" >
| < ASTRACTE : "abstract" >
| < NATIVE : "native" >
| < PACKAGE : "package" >
| < STATIC : "static" >
| < WHILE : "while" >
| < MAIN : "main" >
| < Byte : "byte" >
| < Short : "short" >
| < INT : "int" >
| < FLOAT : "float" >
| < DOUBLE : "double" >
| < LONG : "long" >
| < STRING : "String" >
| < CHAR : "char" >
| < VOID : "void" >
| < RETURN : "return" >
}
TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < MOD  : "%" >
| < BIG : ">" >
| < SMALL : "<" >
| < EQUAL : "=" >
| < PANDENG : "==" >
| < BUDENG : "!=" >

}

TOKEN: /* SEPARATER*/
{
  < SEMICOLON : ";" >
| < COMMA : "," >
| < LBRACES : "{" >
| < RBRACES : "}" >
| < LBRACKETS: "[" >
| < RBRACKETS: " ]" >
| < LSMALL :"(" >
| < RSMALL : ")" >
}
TOKEN : /* LITERALS */{  < INTEGER_LITERAL :    < DECIMAL_LITERAL > ([ "l", "L" ])?  | < HEX_LITERAL > ([ "l", "L" ])?  | < OCTAL_LITERAL > ([ "l", "L" ])?     >| < #DECIMAL_LITERAL : [ "1"-"9" ] ([ "0"-"9" ])* >| < #HEX_LITERAL : "0" [ "x", "X" ] ([ "0"-"9", "a"-"f", "A"-"F" ])+ >| < #OCTAL_LITERAL : "0" ([ "0"-"7" ])* >}TOKEN : /* IDENTIFIERS */{  < IDENTIFIER :    < LETTER >    (      < LETTER >    | < DIGIT >    )* >| < #LETTER : [ "_", "a"-"z", "A"-"Z" ] >| < #DIGIT : [ "0"-"9" ] >}SimpleNode Start() :{}{  Program()
  {
    return jjtThis;  }}/* program main*/void Program() :{}{
  < VOID > < MAIN > < LSMALL > < RSMALL >
  < LBRACES >
  (   StatementBlock()
   )*
  < RBRACES >}
void StatementBlock():
{ }
{
    Statement()
| < LBRACES >
(
  StatementBlock())*
< RBRACES >

}
void Statement():
{}
{
  SequentialStatement()
| ConditionalSatement()
| LoopStatement()
}


void SequentialStatement():
{}
{
  [
  DeclarationStatement()
| AssignmentStatement()
]";"
}



void DeclarationStatement():
{}
{
	< INT > < IDENTIFIER > ( < EQUAL >Integer())?
	(	  < COMMA >
	   	
	  < IDENTIFIER > ( < EQUAL >Integer())?
   )*
	  
}

void AssignmentStatement():
{ }
{
  < IDENTIFIER > <EQUAL > Expression()
}
void ConditionalSatement():
{
}
{
  < IF >
  Conditional()
  StatementBlock()
}

void LoopStatement():
{
}
{
  < WHILE > Conditional()
  StatementBlock()
}
void Conditional():
{ }
{
  "("
  Expression()
  Relation()
  Expression()
  ")"
}

void Relation() :
{}
{
  <BIG> | <SMALL> | <EQUAL> | <PANDENG> | <BUDENG> 
}



void Expression() :
{}
{
  AdditiveExpression()
}

void AdditiveExpression() :
{}
{
  MultiplicativeExpression()
  (
    (
      "+"
    | "-"
    )
    MultiplicativeExpression()
  )*
}

void MultiplicativeExpression() :
{}
{
  UnaryExpression()
  (
    (
      "*"
    | "/"
    | "%"
    )
    UnaryExpression()
  )*
}

void UnaryExpression() :
{}
{
  "(" Expression() ")"
| Identifier()
| Integer()
}

void Identifier() :
{}
{
  < IDENTIFIER >
}

void Integer() :
{}
{
  < INTEGER_LITERAL >
}




