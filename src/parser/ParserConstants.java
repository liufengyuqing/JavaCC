/* Generated By:JJTree&JavaCC: Do not edit this line. ParserConstants.java */
package parser;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int IF = 7;
  /** RegularExpression Id. */
  int ELSE = 8;
  /** RegularExpression Id. */
  int FOR = 9;
  /** RegularExpression Id. */
  int FALSE = 10;
  /** RegularExpression Id. */
  int TRUE = 11;
  /** RegularExpression Id. */
  int DO = 12;
  /** RegularExpression Id. */
  int IMPORT = 13;
  /** RegularExpression Id. */
  int IMPLEMENTS = 14;
  /** RegularExpression Id. */
  int EXTENDS = 15;
  /** RegularExpression Id. */
  int PUBLIC = 16;
  /** RegularExpression Id. */
  int PROTECTED = 17;
  /** RegularExpression Id. */
  int PRIVATE = 18;
  /** RegularExpression Id. */
  int ASTRACTE = 19;
  /** RegularExpression Id. */
  int NATIVE = 20;
  /** RegularExpression Id. */
  int PACKAGE = 21;
  /** RegularExpression Id. */
  int STATIC = 22;
  /** RegularExpression Id. */
  int WHILE = 23;
  /** RegularExpression Id. */
  int MAIN = 24;
  /** RegularExpression Id. */
  int Byte = 25;
  /** RegularExpression Id. */
  int Short = 26;
  /** RegularExpression Id. */
  int INT = 27;
  /** RegularExpression Id. */
  int FLOAT = 28;
  /** RegularExpression Id. */
  int DOUBLE = 29;
  /** RegularExpression Id. */
  int LONG = 30;
  /** RegularExpression Id. */
  int STRING = 31;
  /** RegularExpression Id. */
  int CHAR = 32;
  /** RegularExpression Id. */
  int VOID = 33;
  /** RegularExpression Id. */
  int RETURN = 34;
  /** RegularExpression Id. */
  int PLUS = 35;
  /** RegularExpression Id. */
  int MINUS = 36;
  /** RegularExpression Id. */
  int MULTIPLY = 37;
  /** RegularExpression Id. */
  int DIVIDE = 38;
  /** RegularExpression Id. */
  int MOD = 39;
  /** RegularExpression Id. */
  int BIG = 40;
  /** RegularExpression Id. */
  int SMALL = 41;
  /** RegularExpression Id. */
  int EQUAL = 42;
  /** RegularExpression Id. */
  int PANDENG = 43;
  /** RegularExpression Id. */
  int BUDENG = 44;
  /** RegularExpression Id. */
  int SEMICOLON = 45;
  /** RegularExpression Id. */
  int COMMA = 46;
  /** RegularExpression Id. */
  int LBRACES = 47;
  /** RegularExpression Id. */
  int RBRACES = 48;
  /** RegularExpression Id. */
  int LBRACKETS = 49;
  /** RegularExpression Id. */
  int RBRACKETS = 50;
  /** RegularExpression Id. */
  int LSMALL = 51;
  /** RegularExpression Id. */
  int RSMALL = 52;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 53;
  /** RegularExpression Id. */
  int DECIMAL_LITERAL = 54;
  /** RegularExpression Id. */
  int HEX_LITERAL = 55;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 56;
  /** RegularExpression Id. */
  int IDENTIFIER = 57;
  /** RegularExpression Id. */
  int LETTER = 58;
  /** RegularExpression Id. */
  int DIGIT = 59;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "<token of kind 5>",
    "<token of kind 6>",
    "\"if\"",
    "\"else\"",
    "\"for\"",
    "\"false\"",
    "\"true\"",
    "\"do\"",
    "\"import\"",
    "\"implements\"",
    "\"extends\"",
    "\"public\"",
    "\"protected\"",
    "\"private\"",
    "\"abstract\"",
    "\"native\"",
    "\"package\"",
    "\"static\"",
    "\"while\"",
    "\"main\"",
    "\"byte\"",
    "\"short\"",
    "\"int\"",
    "\"float\"",
    "\"double\"",
    "\"long\"",
    "\"String\"",
    "\"char\"",
    "\"void\"",
    "\"return\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"%\"",
    "\">\"",
    "\"<\"",
    "\"=\"",
    "\"==\"",
    "\"!=\"",
    "\";\"",
    "\",\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\" ]\"",
    "\"(\"",
    "\")\"",
    "<INTEGER_LITERAL>",
    "<DECIMAL_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<DIGIT>",
  };

}
